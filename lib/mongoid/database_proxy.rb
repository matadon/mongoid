require 'thread'

#
# Proxy that enables runtime swapping of a MongoDB database, as it
# appears to be cached at several points within Mongoid.
#
# This proxy is generated by the ConnectionProxy when asked for a
# specific database.
#
class DatabaseProxy
    @mutex = Mutex.new
    @pool = Hash.new
    @mapping = Hash.new

    #
    # Accessor for class-level instance variable that holds all the
    # connection-database pairs that we know about, so that we can
    # switch all of them globally.
    #
    def DatabaseProxy.pool
        @pool
    end

    #
    # Mapping of databases that have been 'reconnected' in a specific
    # thread context.
    #
    def DatabaseProxy.mapping
        @mapping
    end

    #
    # Global mutex... for great thread safety!
    #
    def DatabaseProxy.mutex
        @mutex
    end

    #
    # Set our default connection and name.
    #
    def initialize(connection, name)
        @connection = connection
        switch(@default = name)
    end

    #
    # Convenience method for synchronizing threads.
    #
    def synchronize(&block)
        DatabaseProxy.mutex.synchronize(&block)
    end

    #
    # Switch to a different database on the same connection.
    #
    def switch(name)
        synchronize do
            # Connect to the cached database if available.
            pool = (DatabaseProxy.pool[@connection] ||= {})
            database = (pool[name] || (pool[name] = @connection.db(name)))

            # Ensure that we've got a mappingping for other consumers.
            mapping = (DatabaseProxy.mapping[@connection] ||= {})
            mapping[@default] = database
        end
    end

    #
    # Resets back to the default database connections.
    #
    def reset!
        synchronize { mapping[@default] = pool[@default] }
    end

    #
    # Proxy methods to the correct database.
    #
    def method_missing(*args, &block)
        database = synchronize { 
            DatabaseProxy.mapping[@connection][@default] }
        database.send(*args, &block)
    end
end
