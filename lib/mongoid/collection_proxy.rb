require 'thread'

#
# Proxy that enables runtime swapping of a MongoDB collection, as it
# appears to be cached at several points within Mongoid.
#
# This proxy is generated by the DatabaseProxy when asked for a
# specific collection.
#
class CollectionProxy
    #
    # Class-level instance variables.
    #
    @mutex = Mutex.new
    @pool = Hash.new

    #
    # Accessor for class-level instance variable that holds all the
    # db-collection pairs that we know about, so that we can switch all
    # of them globally.
    #
    def CollectionProxy.pool
        @pool
    end

    #
    # Collection-global mutex... for great thread safety!
    #
    def CollectionProxy.mutex
        @mutex
    end

    #
    # Set our default connection and name.
    #
    def initialize(db, name, opts)
        @db, @name, @opts = db, name, opts
    end

    #
    # Convenience method for synchronizing threads.
    #
    def synchronize(&block)
        CollectionProxy.mutex.synchronize(&block)
    end

    #
    # Proxy methods to the correct collection. We do this by trying to
    # find a matching collection in our pool, and if not, we create one
    # using the _name_ and _opts_ initially passed to initialize.
    #
    def method_missing(*args, &block)
        collection = synchronize do
            pool = (CollectionProxy.pool[@db.target] ||= {})
            pool[@name] ||= @db.target.create_collection(@name, @opts)
        end
        collection.send(*args, &block)
    end
end
